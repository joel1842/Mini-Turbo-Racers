{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joel\\\\Documents\\\\Mini-Turbo-Derby\\\\mini-turbo-derby\\\\src\\\\Track.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass carBetting extends Component {\n  constructor() {\n    super();\n    this.state = {\n      betPrice: 100,\n      stakes: 4\n    };\n    this.handlePrice = this.handlePrice.bind(this);\n    this.handleStake = this.handleStake.bind(this);\n    this.clearStake = this.clearStake.bind(this);\n    this.clearPrice = this.clearPrice.bind(this);\n  }\n\n  handleStake() {\n    this.setState({\n      stakes: this.state.stakes * 2\n    });\n  }\n\n  clearStake() {\n    this.setState({\n      stakes: this.state.stakes * 0 + 4\n    });\n  }\n\n  handlePrice() {\n    this.setState({\n      betPrice: this.state.betPrice + 10\n    });\n  }\n\n  clearPrice() {\n    this.setState({\n      betPrice: this.state.betPrice * 0\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: this.state.stakes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: this.state.betPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleStake,\n          children: \"Increase Stakes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearStake,\n          children: \"Clear Stakes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handlePrice,\n          children: \"Increase Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearPrice,\n          children: \"Clear Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n} // import {\n//     Link\n//   } from \"react-router-dom\";\n// const Track = () => {\n//     return(\n//         <div>\n//             <h1>TRACK!</h1>\n//             <button onClick={startRace}>Start Race!</button>\n//             <Link to=\"/\">\n//                 <button>\n//                     Go back!\n//                 </button>\n//             </Link>\n//         </div>\n//     )\n// }\n// // car constructor\n// function car(name, speed, weight, acceleration, lane, isBet) {\n//     this.name = name;\n//     this.speed = speed;\n//     this.weight = weight;\n//     this.acceleration = acceleration;\n//     this.lane = lane;\n//     this.isBet = isBet;\n// }\n// // cars\n// const car1 = new car(1, 100, 200, 5, 1, true);\n// const car2 = new car(2, 120, 300, 2, 2, false);\n// const car3 = new car(3, 90, 150, 7, 3, false);\n// // powerup constructor\n// function powerUp(boost, duration, price) {\n//     this.boost = boost;\n//     this.duration = duration;\n//     this.price = price;\n// }\n// // powerups\n// const supremeFuel = new powerUp(1.25, 2000, 50);\n// const turboBoost = new powerUp(1.5, 4000, 100);\n// let lane1Counter;\n// let lane2Counter;\n// let lane3Counter;\n// let interval1Speed;\n// let interval2Speed;\n// let interval3Speed;\n// let powerUpInterval;\n// // start race & set interval speeds\n// const startRace = () => {\n//     interval1Speed = 10000 / car1.speed;\n//     interval2Speed = 10000/ car2.speed;\n//     interval3Speed = 10000/ car3.speed;\n//     lane1Counter = setInterval(car1Counter, interval1Speed);\n//     lane2Counter = setInterval(car2Counter, interval2Speed);\n//     lane3Counter = setInterval(car3Counter, interval3Speed);\n//     powerUpInterval = setInterval(powerUpPosition, 100);\n// }\n// let lapCount = 0;\n// let i = 0;\n// let lapCount2 = 0;\n// let c = 0;\n// let lapCount3 = 0;\n// let x = 0;\n// // car timers\n// const car1Counter = () => {\n//     if (i < 10) {\n//         i++;\n//         console.log(\"Car1 Position:\", i);\n//     } else if (i === 10) {\n//         if (lapCount < 3) {\n//             lapCount += 1;\n//             console.log(\"Car1 Lap:\", lapCount);\n//         } else if (lapCount === 3) {\n//             console.log(\"Car1 has finished the race!\");\n//             clearInterval(lane1Counter);\n//         }\n//         i = 0;\n//     }\n// }\n// const car2Counter = () => {\n//     if (c < 10) {\n//         c++;\n//         console.log(\"Car2 Position:\", c);\n//     } else if (c === 10) {\n//         if (lapCount2 < 3) {\n//             lapCount2 += 1;\n//             console.log(\"Car2 Lap:\", lapCount2);\n//         } else if (lapCount2 === 3) {\n//             console.log(\"Car2 has finished the race!\");\n//             clearInterval(lane2Counter);\n//         }\n//         c = 0;\n//     }\n// }\n// const car3Counter = () => {\n//     if (x < 10) {\n//         x++;\n//         console.log(\"Car3 Position:\", x);\n//     } else if (x === 10) {\n//         if (lapCount3 < 3) {\n//             lapCount3 += 1;\n//             console.log(\"Car3 Lap:\", lapCount3);\n//         } else if (lapCount3 === 3) {\n//             console.log(\"Car3 has finished the race!\");\n//             clearInterval(lane3Counter);\n//         }\n//         x = 0;\n//     }\n// }\n// // powerup rng\n// let positionSpawn = () => {\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n// }\n// let laneSpawn = () => {\n//     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\n// }\n// // powerup position & usage\n// const powerUpPosition = () => {\n//     let randPosition = positionSpawn();\n//     let randLane = laneSpawn();\n//     if (randPosition === i && randLane === 1) {\n//         console.log(\"Car1 collected SUPREME FUEL!\");\n//         clearInterval(lane1Counter);\n//         lane1Counter = setInterval(car1Counter, 70);\n//         setTimeout(lane1Counter, 200);\n//     } if (randPosition === c && randLane === 2) {\n//         console.log(\"Car2 collected SUPREME FUEL!\");\n//         clearInterval(lane2Counter);\n//         lane2Counter = setInterval(car2Counter, 70);\n//         setTimeout(lane2Counter, 200);\n//     } if (randPosition === x && randLane === 3) {\n//         console.log(\"Car3 collected SUPREME FUEL!\");\n//         clearInterval(lane3Counter);\n//         lane3Counter = setInterval(car3Counter, 70);\n//         setTimeout(lane3Counter, 200);\n//     }\n// } \n\n\nexport default Track;","map":{"version":3,"sources":["C:/Users/Joel/Documents/Mini-Turbo-Derby/mini-turbo-derby/src/Track.js"],"names":["React","Component","carBetting","constructor","state","betPrice","stakes","handlePrice","bind","handleStake","clearStake","clearPrice","setState","render","Track"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAC/BE,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,GADD;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;AAIA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,WAAW,GAAE;AACT,SAAKG,QAAL,CAAc;AACVN,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAAX,GAAoB;AADlB,KAAd;AAGH;;AAEDI,EAAAA,UAAU,GAAE;AACR,SAAKE,QAAL,CAAc;AACVN,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAAX,GAAoB,CAApB,GAAwB;AADtB,KAAd;AAGH;;AAEDC,EAAAA,WAAW,GAAE;AACT,SAAKK,QAAL,CAAc;AACVP,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,GAAsB;AADtB,KAAd;AAGH;;AAEDM,EAAAA,UAAU,GAAE;AACR,SAAKC,QAAL,CAAc;AACVP,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,GAAsB;AADtB,KAAd;AAGH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,kBAAS,KAAKT,KAAL,CAAWE;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAS,KAAKF,KAAL,CAAWC;AAApB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,gCACI;AAAQ,UAAA,OAAO,EAAE,KAAKI,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,OAAO,EAAE,KAAKH,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,OAAO,EAAE,KAAKI,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAlD8B,C,CAqDneAAeG,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass carBetting extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            betPrice: 100,\r\n            stakes: 4\r\n        }\r\n        this.handlePrice = this.handlePrice.bind(this)\r\n        this.handleStake = this.handleStake.bind(this)\r\n        this.clearStake = this.clearStake.bind(this)\r\n        this.clearPrice = this.clearPrice.bind(this)\r\n    }\r\n\r\n    handleStake(){\r\n        this.setState({\r\n            stakes: this.state.stakes * 2\r\n        })\r\n    }\r\n\r\n    clearStake(){\r\n        this.setState({\r\n            stakes: this.state.stakes * 0 + 4\r\n        })\r\n    }\r\n\r\n    handlePrice(){\r\n        this.setState({\r\n            betPrice: this.state.betPrice + 10\r\n        })\r\n    }\r\n\r\n    clearPrice(){\r\n        this.setState({\r\n            betPrice: this.state.betPrice * 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button>{this.state.stakes}</button>\r\n                <button>{this.state.betPrice}</button>\r\n                <div>\r\n                    <button onClick={this.handleStake}>Increase Stakes</button>\r\n                    <button onClick={this.clearStake}>Clear Stakes</button>\r\n                    <button onClick={this.handlePrice}>Increase Price</button>\r\n                    <button onClick={this.clearPrice}>Clear Price</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// import {\r\n//     Link\r\n//   } from \"react-router-dom\";\r\n\r\n// const Track = () => {\r\n//     return(\r\n//         <div>\r\n//             <h1>TRACK!</h1>\r\n//             <button onClick={startRace}>Start Race!</button>\r\n//             <Link to=\"/\">\r\n//                 <button>\r\n//                     Go back!\r\n//                 </button>\r\n//             </Link>\r\n//         </div>\r\n        \r\n//     )\r\n// }\r\n\r\n// // car constructor\r\n// function car(name, speed, weight, acceleration, lane, isBet) {\r\n//     this.name = name;\r\n//     this.speed = speed;\r\n//     this.weight = weight;\r\n//     this.acceleration = acceleration;\r\n//     this.lane = lane;\r\n//     this.isBet = isBet;\r\n// }\r\n// // cars\r\n// const car1 = new car(1, 100, 200, 5, 1, true);\r\n\r\n// const car2 = new car(2, 120, 300, 2, 2, false);\r\n\r\n// const car3 = new car(3, 90, 150, 7, 3, false);\r\n\r\n// // powerup constructor\r\n// function powerUp(boost, duration, price) {\r\n//     this.boost = boost;\r\n//     this.duration = duration;\r\n//     this.price = price;\r\n// }\r\n// // powerups\r\n// const supremeFuel = new powerUp(1.25, 2000, 50);\r\n\r\n// const turboBoost = new powerUp(1.5, 4000, 100);\r\n\r\n\r\n// let lane1Counter;\r\n// let lane2Counter;\r\n// let lane3Counter;\r\n// let interval1Speed;\r\n// let interval2Speed;\r\n// let interval3Speed;\r\n// let powerUpInterval;\r\n\r\n// // start race & set interval speeds\r\n// const startRace = () => {\r\n//     interval1Speed = 10000 / car1.speed;\r\n//     interval2Speed = 10000/ car2.speed;\r\n//     interval3Speed = 10000/ car3.speed;\r\n//     lane1Counter = setInterval(car1Counter, interval1Speed);\r\n//     lane2Counter = setInterval(car2Counter, interval2Speed);\r\n//     lane3Counter = setInterval(car3Counter, interval3Speed);\r\n//     powerUpInterval = setInterval(powerUpPosition, 100);\r\n// }\r\n\r\n\r\n// let lapCount = 0;\r\n// let i = 0;\r\n\r\n// let lapCount2 = 0;\r\n// let c = 0;\r\n\r\n// let lapCount3 = 0;\r\n// let x = 0;\r\n\r\n// // car timers\r\n// const car1Counter = () => {\r\n//     if (i < 10) {\r\n//         i++;\r\n//         console.log(\"Car1 Position:\", i);\r\n//     } else if (i === 10) {\r\n//         if (lapCount < 3) {\r\n//             lapCount += 1;\r\n//             console.log(\"Car1 Lap:\", lapCount);\r\n//         } else if (lapCount === 3) {\r\n//             console.log(\"Car1 has finished the race!\");\r\n//             clearInterval(lane1Counter);\r\n//         }\r\n//         i = 0;\r\n//     }\r\n// }\r\n\r\n// const car2Counter = () => {\r\n//     if (c < 10) {\r\n//         c++;\r\n//         console.log(\"Car2 Position:\", c);\r\n//     } else if (c === 10) {\r\n//         if (lapCount2 < 3) {\r\n//             lapCount2 += 1;\r\n//             console.log(\"Car2 Lap:\", lapCount2);\r\n//         } else if (lapCount2 === 3) {\r\n//             console.log(\"Car2 has finished the race!\");\r\n//             clearInterval(lane2Counter);\r\n//         }\r\n//         c = 0;\r\n//     }\r\n// }\r\n\r\n// const car3Counter = () => {\r\n//     if (x < 10) {\r\n//         x++;\r\n//         console.log(\"Car3 Position:\", x);\r\n//     } else if (x === 10) {\r\n//         if (lapCount3 < 3) {\r\n//             lapCount3 += 1;\r\n//             console.log(\"Car3 Lap:\", lapCount3);\r\n//         } else if (lapCount3 === 3) {\r\n//             console.log(\"Car3 has finished the race!\");\r\n//             clearInterval(lane3Counter);\r\n//         }\r\n//         x = 0;\r\n//     }\r\n// }\r\n\r\n// // powerup rng\r\n// let positionSpawn = () => {\r\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n// }\r\n\r\n// let laneSpawn = () => {\r\n//     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\r\n// }\r\n\r\n// // powerup position & usage\r\n// const powerUpPosition = () => {\r\n//     let randPosition = positionSpawn();\r\n//     let randLane = laneSpawn();\r\n\r\n//     if (randPosition === i && randLane === 1) {\r\n//         console.log(\"Car1 collected SUPREME FUEL!\");\r\n//         clearInterval(lane1Counter);\r\n//         lane1Counter = setInterval(car1Counter, 70);\r\n//         setTimeout(lane1Counter, 200);\r\n    \r\n//     } if (randPosition === c && randLane === 2) {\r\n//         console.log(\"Car2 collected SUPREME FUEL!\");\r\n//         clearInterval(lane2Counter);\r\n//         lane2Counter = setInterval(car2Counter, 70);\r\n//         setTimeout(lane2Counter, 200);\r\n  \r\n//     } if (randPosition === x && randLane === 3) {\r\n//         console.log(\"Car3 collected SUPREME FUEL!\");\r\n//         clearInterval(lane3Counter);\r\n//         lane3Counter = setInterval(car3Counter, 70);\r\n//         setTimeout(lane3Counter, 200);\r\n//     }\r\n// } \r\n\r\nexport default Track;"]},"metadata":{},"sourceType":"module"}