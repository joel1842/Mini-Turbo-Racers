{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joel\\\\Documents\\\\Mini-Turbo-Derby\\\\mini-turbo-derby\\\\src\\\\Track.js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Track = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRACK!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRace,\n      children: \"Start Race!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Go back!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Track;\nlet activeCars = [];\n\nfunction car(name, speed, weight, acceleration, lane, isBet) {\n  this.name = name;\n  this.speed = speed;\n  this.weight = weight;\n  this.acceleration = acceleration;\n  this.lane = lane;\n  this.isBet = isBet;\n}\n\nconst car1 = new car(1, 100, 200, 5, 1, true);\nconst car2 = new car(2, 120, 300, 2, 2, false);\nconst car3 = new car(3, 90, 150, 7, 3, false);\nlet lane1Counter;\nlet lane2Counter;\nlet lane3Counter;\n\nconst startRace = () => {\n  let interval1Speed = 10000 / car1.speed;\n  let interval2Speed = 10000 / car2.speed;\n  let interval3Speed = 10000 / car3.speed;\n  lane1Counter = setInterval(car1Counter, interval1Speed);\n  lane2Counter = setInterval(car2Counter, interval2Speed);\n  lane3Counter = setInterval(car3Counter, interval3Speed);\n};\n\nlet lapCount = 0;\nlet i = 0;\n\nconst car1Counter = () => {\n  if (i < 10) {\n    i++;\n    console.log(\"Car1 Position:\", i);\n  } else if (i === 10) {\n    if (i === 10) {\n      if (lapCount < 3) {\n        lapCount += 1;\n        console.log(\"Car1 Lap:\", lapCount);\n      } else if (lapCount === 3) {\n        console.log(\"Car1 has finished the race!\");\n        clearInterval(lane1Counter);\n      }\n\n      i = 0;\n    }\n  }\n};\n\nlet lapCount2 = 0;\nlet c = 0;\n\nconst car2Counter = () => {\n  if (c < 10) {\n    c++;\n    console.log(\"Car2 Position:\", c);\n  } else if (c === 10) {\n    if (c === 10) {\n      if (lapCount2 < 3) {\n        lapCount2 += 1;\n        console.log(\"Car2 Lap:\", lapCount2);\n      } else if (lapCount2 === 3) {\n        console.log(\"Car2 has finished the race!\");\n        clearInterval(lane2Counter);\n      }\n\n      c = 0;\n    }\n  }\n};\n\nlet lapCount3 = 0;\nlet x = 0;\n\nconst car3Counter = () => {\n  if (x < 10) {\n    x++;\n    console.log(\"Car3 Position:\", x);\n  } else if (x === 10) {\n    if (x === 10) {\n      if (lapCount3 < 3) {\n        lapCount3 += 1;\n        console.log(\"Car3 Lap:\", lapCount3);\n      } else if (lapCount3 === 3) {\n        console.log(\"Car3 has finished the race!\");\n        clearInterval(lane3Counter);\n      }\n\n      x = 0;\n    }\n  }\n}; // let i = 0;\n// let lapCount = 0;\n// const carPosition = () => {\n//     if (i < 10) {\n//         i++;\n//         console.log(\"Car Position =\", i);\n//     } else if (i === 10) {\n//         lapCounter();\n//         i = 0;\n//     }\n// }\n// let carInterval = setInterval(carPosition, 500);\n// const lapCounter = () => {\n//     if (i === 10) {\n//         if (lapCount < 3) {\n//             lapCount += 1;\n//             console.log(\"Lap:\", lapCount);\n//         } else if (lapCount === 3) {\n//             console.log(\"Race has ended!\");\n//             clearInterval(carInterval);\n//         }\n//     }\n// }\n// function powerUp(boost, duration, price) {\n//     this.boost = boost;\n//     this.duration = duration;\n//     this.price = price;\n// }\n// const supremeFuel = new powerUp(1.25, 2000, 50);\n// const turboBoost = new powerUp(1.5, 4000, 100);\n// let positionSpawn = () => {\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n// }\n// // for when lanes are added\n// // let laneSpawn = () => {\n// //     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\n// // }\n// const powerUpPosition = () => {\n//     let randPosition = positionSpawn();\n//     // for when lanes are added\n//     // let randLane = laneSpawn();\n//     if (randPosition === i) {\n//         console.log(\"SUPREME FUEL COLLECTED!\");\n//         carInterval = setInterval(carPosition, 200);\n//     } \n// }\n// let powerUpInterval = setInterval(powerUpPosition, 5000);\n\n\nexport default Track;\n\nvar _c;\n\n$RefreshReg$(_c, \"Track\");","map":{"version":3,"sources":["C:/Users/Joel/Documents/Mini-Turbo-Derby/mini-turbo-derby/src/Track.js"],"names":["Link","Track","startRace","activeCars","car","name","speed","weight","acceleration","lane","isBet","car1","car2","car3","lane1Counter","lane2Counter","lane3Counter","interval1Speed","interval2Speed","interval3Speed","setInterval","car1Counter","car2Counter","car3Counter","lapCount","i","console","log","clearInterval","lapCount2","c","lapCount3","x"],"mappings":"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","sourcesContent":["import {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nconst Track = () => {\r\n    return(\r\n        <div>\r\n            <h1>TRACK!</h1>\r\n            <button onClick={startRace}>Start Race!</button>\r\n            <Link to=\"/\">\r\n                <button>\r\n                    Go back!\r\n                </button>\r\n            </Link>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nlet activeCars = [];\r\n\r\nfunction car(name, speed, weight, acceleration, lane, isBet) {\r\n    this.name = name;\r\n    this.speed = speed;\r\n    this.weight = weight;\r\n    this.acceleration = acceleration;\r\n    this.lane = lane;\r\n    this.isBet = isBet;\r\n}\r\n\r\nconst car1 = new car(1, 100, 200, 5, 1, true);\r\n\r\nconst car2 = new car(2, 120, 300, 2, 2, false);\r\n\r\nconst car3 = new car(3, 90, 150, 7, 3, false);\r\n\r\nlet lane1Counter;\r\nlet lane2Counter;\r\nlet lane3Counter;\r\n\r\nconst startRace = () => {\r\n    let interval1Speed = 10000 / car1.speed;\r\n    let interval2Speed = 10000/ car2.speed;\r\n    let interval3Speed = 10000/ car3.speed;\r\n    lane1Counter = setInterval(car1Counter, interval1Speed);\r\n    lane2Counter = setInterval(car2Counter, interval2Speed);\r\n    lane3Counter = setInterval(car3Counter, interval3Speed);\r\n}\r\n\r\nlet lapCount = 0;\r\nlet i = 0;\r\n\r\nconst car1Counter = () => {\r\n\r\n    if (i < 10) {\r\n        i++;\r\n        console.log(\"Car1 Position:\", i);\r\n    } else if (i === 10) {\r\n        if (i === 10) {\r\n            if (lapCount < 3) {\r\n                lapCount += 1;\r\n                console.log(\"Car1 Lap:\", lapCount);\r\n            } else if (lapCount === 3) {\r\n                console.log(\"Car1 has finished the race!\");\r\n                clearInterval(lane1Counter);\r\n            }\r\n            i = 0;\r\n        }\r\n    }\r\n}\r\n\r\nlet lapCount2 = 0;\r\nlet c = 0;\r\n\r\nconst car2Counter = () => {\r\n\r\n    if (c < 10) {\r\n        c++;\r\n        console.log(\"Car2 Position:\", c);\r\n    } else if (c === 10) {\r\n        if (c === 10) {\r\n            if (lapCount2 < 3) {\r\n                lapCount2 += 1;\r\n                console.log(\"Car2 Lap:\", lapCount2);\r\n            } else if (lapCount2 === 3) {\r\n                console.log(\"Car2 has finished the race!\");\r\n                clearInterval(lane2Counter);\r\n            }\r\n            c = 0;\r\n        }\r\n    }\r\n}\r\n\r\nlet lapCount3 = 0;\r\nlet x = 0;\r\n\r\nconst car3Counter = () => {\r\n\r\n    if (x < 10) {\r\n        x++;\r\n        console.log(\"Car3 Position:\", x);\r\n    } else if (x === 10) {\r\n        if (x === 10) {\r\n            if (lapCount3 < 3) {\r\n                lapCount3 += 1;\r\n                console.log(\"Car3 Lap:\", lapCount3);\r\n            } else if (lapCount3 === 3) {\r\n                console.log(\"Car3 has finished the race!\");\r\n                clearInterval(lane3Counter);\r\n            }\r\n            x = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// let i = 0;\r\n// let lapCount = 0;\r\n\r\n// const carPosition = () => {\r\n//     if (i < 10) {\r\n//         i++;\r\n//         console.log(\"Car Position =\", i);\r\n//     } else if (i === 10) {\r\n//         lapCounter();\r\n//         i = 0;\r\n//     }\r\n// }\r\n\r\n// let carInterval = setInterval(carPosition, 500);\r\n\r\n// const lapCounter = () => {\r\n//     if (i === 10) {\r\n//         if (lapCount < 3) {\r\n//             lapCount += 1;\r\n//             console.log(\"Lap:\", lapCount);\r\n//         } else if (lapCount === 3) {\r\n//             console.log(\"Race has ended!\");\r\n//             clearInterval(carInterval);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// function powerUp(boost, duration, price) {\r\n//     this.boost = boost;\r\n//     this.duration = duration;\r\n//     this.price = price;\r\n// }\r\n\r\n// const supremeFuel = new powerUp(1.25, 2000, 50);\r\n\r\n// const turboBoost = new powerUp(1.5, 4000, 100);\r\n\r\n// let positionSpawn = () => {\r\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n// }\r\n\r\n// // for when lanes are added\r\n// // let laneSpawn = () => {\r\n// //     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\r\n// // }\r\n\r\n// const powerUpPosition = () => {\r\n//     let randPosition = positionSpawn();\r\n//     // for when lanes are added\r\n//     // let randLane = laneSpawn();\r\n//     if (randPosition === i) {\r\n//         console.log(\"SUPREME FUEL COLLECTED!\");\r\n//         carInterval = setInterval(carPosition, 200);\r\n//     } \r\n// }\r\n\r\n// let powerUpInterval = setInterval(powerUpPosition, 5000);\r\n\r\n\r\nexport default Track;"]},"metadata":{},"sourceType":"module"}