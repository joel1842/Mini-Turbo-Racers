{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joel\\\\Documents\\\\Mini-Turbo-Derby\\\\mini-turbo-derby\\\\src\\\\Track.js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Track = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRACK!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Go back!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}; // // car constructor\n// function car(name, speed, weight, acceleration, lane, isBet) {\n//     this.name = name;\n//     this.speed = speed;\n//     this.weight = weight;\n//     this.acceleration = acceleration;\n//     this.lane = lane;\n//     this.isBet = isBet;\n// }\n// // cars\n// const car1 = new car(1, 100, 200, 5, 1, true);\n// const car2 = new car(2, 120, 300, 2, 2, false);\n// const car3 = new car(3, 90, 150, 7, 3, false);\n// // powerup constructor\n// function powerUp(boost, duration, price) {\n//     this.boost = boost;\n//     this.duration = duration;\n//     this.price = price;\n// }\n// // powerups\n// const supremeFuel = new powerUp(1.25, 2000, 50);\n// const turboBoost = new powerUp(1.5, 4000, 100);\n// let lane1Counter;\n// let lane2Counter;\n// let lane3Counter;\n// let interval1Speed;\n// let interval2Speed;\n// let interval3Speed;\n// let powerUpInterval;\n// // start race & set interval speeds\n// const startRace = () => {\n//     interval1Speed = 10000 / car1.speed;\n//     interval2Speed = 10000/ car2.speed;\n//     interval3Speed = 10000/ car3.speed;\n//     lane1Counter = setInterval(car1Counter, interval1Speed);\n//     lane2Counter = setInterval(car2Counter, interval2Speed);\n//     lane3Counter = setInterval(car3Counter, interval3Speed);\n//     powerUpInterval = setInterval(powerUpPosition, 100);\n// }\n// let lapCount = 0;\n// let i = 0;\n// let lapCount2 = 0;\n// let c = 0;\n// let lapCount3 = 0;\n// let x = 0;\n// // car timers\n// const car1Counter = () => {\n//     if (i < 10) {\n//         i++;\n//         console.log(\"Car1 Position:\", i);\n//     } else if (i === 10) {\n//         if (lapCount < 3) {\n//             lapCount += 1;\n//             console.log(\"Car1 Lap:\", lapCount);\n//         } else if (lapCount === 3) {\n//             console.log(\"Car1 has finished the race!\");\n//             clearInterval(lane1Counter);\n//         }\n//         i = 0;\n//     }\n// }\n// const car2Counter = () => {\n//     if (c < 10) {\n//         c++;\n//         console.log(\"Car2 Position:\", c);\n//     } else if (c === 10) {\n//         if (lapCount2 < 3) {\n//             lapCount2 += 1;\n//             console.log(\"Car2 Lap:\", lapCount2);\n//         } else if (lapCount2 === 3) {\n//             console.log(\"Car2 has finished the race!\");\n//             clearInterval(lane2Counter);\n//         }\n//         c = 0;\n//     }\n// }\n// const car3Counter = () => {\n//     if (x < 10) {\n//         x++;\n//         console.log(\"Car3 Position:\", x);\n//     } else if (x === 10) {\n//         if (lapCount3 < 3) {\n//             lapCount3 += 1;\n//             console.log(\"Car3 Lap:\", lapCount3);\n//         } else if (lapCount3 === 3) {\n//             console.log(\"Car3 has finished the race!\");\n//             clearInterval(lane3Counter);\n//         }\n//         x = 0;\n//     }\n// }\n// // powerup rng\n// let positionSpawn = () => {\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n// }\n// let laneSpawn = () => {\n//     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\n// }\n// // powerup position & usage\n// const powerUpPosition = () => {\n//     let randPosition = positionSpawn();\n//     let randLane = laneSpawn();\n//     if (randPosition === i && randLane === 1) {\n//         console.log(\"Car1 collected SUPREME FUEL!\");\n//         clearInterval(lane1Counter);\n//         lane1Counter = setInterval(car1Counter, 70);\n//         setTimeout(lane1Counter, 200);\n//     } if (randPosition === c && randLane === 2) {\n//         console.log(\"Car2 collected SUPREME FUEL!\");\n//         clearInterval(lane2Counter);\n//         lane2Counter = setInterval(car2Counter, 70);\n//         setTimeout(lane2Counter, 200);\n//     } if (randPosition === x && randLane === 3) {\n//         console.log(\"Car3 collected SUPREME FUEL!\");\n//         clearInterval(lane3Counter);\n//         lane3Counter = setInterval(car3Counter, 70);\n//         setTimeout(lane3Counter, 200);\n//     }\n// } \n// car constructor\n\n\n_c = Track;\n\nfunction car(name, speed, weight, acceleration, lane, isBet, bet, place) {\n  this.name = name;\n  this.speed = speed;\n  this.weight = weight;\n  this.acceleration = acceleration;\n  this.lane = lane;\n  this.isBet = isBet;\n  this.bet = bet;\n  this.place = place;\n} // cars\n\n\nconst car1 = new car(1, 100, 200, 5, 1, true, 50, 2);\nconst car2 = new car(2, 120, 300, 2, 2, false, 100, 1);\nconst car3 = new car(3, 90, 150, 7, 3, false, 200, 3);\nlet activeCars;\n\nconst carArray = () => {\n  activeCars.push(car1, car2, car3);\n};\n\ncarArray();\n\nconst isBet = () => {\n  activeCars.forEach(() => {\n    if (car.isBet === true) {\n      betMultiplier();\n      console.log('it worked');\n    }\n  });\n};\n\nlet winnings;\n\nconst betMultiplier = () => {\n  if (car.place === 1) {\n    winnings = car.bet * 2;\n  } else if (car.place === 2) {\n    winnings = car.bet * 1.25;\n  } else if (car.place === 3) {\n    winnings = car.bet * 0.5;\n  }\n};\n\nisBet();\nexport default Track;\n\nvar _c;\n\n$RefreshReg$(_c, \"Track\");","map":{"version":3,"sources":["C:/Users/Joel/Documents/Mini-Turbo-Derby/mini-turbo-derby/src/Track.js"],"names":["Link","Track","car","name","speed","weight","acceleration","lane","isBet","bet","place","car1","car2","car3","activeCars","carArray","push","forEach","betMultiplier","console","log","winnings"],"mappings":";AAAA,SACIA,IADJ,QAES,kBAFT;;;AAIA,MAAMC,KAAK,GAAG,MAAM;AAChB,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAbD,C,CAeaC,IAAb,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,YAAlC,EAAgDC,IAAhD,EAAsDC,KAAtD,EAA6DC,GAA7D,EAAkEC,KAAlE,EAAyE;AACrE,OAAKP,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,GAAL,GAAWA,GAAX;AACA,OAAKC,KAAL,GAAaA,KAAb;AAEH,C,CACD;;;AACA,MAAMC,IAAI,GAAG,IAAIT,GAAJ,CAAQ,CAAR,EAAW,GAAX,EAAgB,GAAhB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,IAA3B,EAAiC,EAAjC,EAAqC,CAArC,CAAb;AAEA,MAAMU,IAAI,GAAG,IAAIV,GAAJ,CAAQ,CAAR,EAAW,GAAX,EAAgB,GAAhB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,KAA3B,EAAkC,GAAlC,EAAuC,CAAvC,CAAb;AAEA,MAAMW,IAAI,GAAG,IAAIX,GAAJ,CAAQ,CAAR,EAAW,EAAX,EAAe,GAAf,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,KAA1B,EAAiC,GAAjC,EAAsC,CAAtC,CAAb;AAEA,IAAIY,UAAJ;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnBD,EAAAA,UAAU,CAACE,IAAX,CAAgBL,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B;AACH,CAFD;;AAIAE,QAAQ;;AAER,MAAMP,KAAK,GAAG,MAAM;AAChBM,EAAAA,UAAU,CAACG,OAAX,CAAmB,MAAM;AACrB,QAAIf,GAAG,CAACM,KAAJ,KAAc,IAAlB,EAAwB;AACpBU,MAAAA,aAAa;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AACJ,GALD;AAMH,CAPD;;AASA,IAAIC,QAAJ;;AAEA,MAAMH,aAAa,GAAG,MAAM;AACxB,MAAIhB,GAAG,CAACQ,KAAJ,KAAc,CAAlB,EAAqB;AACjBW,IAAAA,QAAQ,GAAGnB,GAAG,CAACO,GAAJ,GAAU,CAArB;AACH,GAFD,MAEO,IAAIP,GAAG,CAACQ,KAAJ,KAAc,CAAlB,EAAqB;AACxBW,IAAAA,QAAQ,GAAGnB,GAAG,CAACO,GAAJ,GAAU,IAArB;AACH,GAFM,MAEA,IAAIP,GAAG,CAACQ,KAAJ,KAAc,CAAlB,EAAqB;AACxBW,IAAAA,QAAQ,GAAGnB,GAAG,CAACO,GAAJ,GAAU,GAArB;AACH;AACJ,CARD;;AAUAD,KAAK;AAEL,eAAeP,KAAf","sourcesContent":["import {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nconst Track = () => {\r\n    return(\r\n        <div>\r\n            <h1>TRACK!</h1>\r\n            {/* <button onClick={startRace}>Start Race!</button> */}\r\n            <Link to=\"/\">\r\n                <button>\r\n                    Go back!\r\n                </button>\r\n            </Link>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n// // car constructor\r\n// function car(name, speed, weight, acceleration, lane, isBet) {\r\n//     this.name = name;\r\n//     this.speed = speed;\r\n//     this.weight = weight;\r\n//     this.acceleration = acceleration;\r\n//     this.lane = lane;\r\n//     this.isBet = isBet;\r\n// }\r\n// // cars\r\n// const car1 = new car(1, 100, 200, 5, 1, true);\r\n\r\n// const car2 = new car(2, 120, 300, 2, 2, false);\r\n\r\n// const car3 = new car(3, 90, 150, 7, 3, false);\r\n\r\n// // powerup constructor\r\n// function powerUp(boost, duration, price) {\r\n//     this.boost = boost;\r\n//     this.duration = duration;\r\n//     this.price = price;\r\n// }\r\n// // powerups\r\n// const supremeFuel = new powerUp(1.25, 2000, 50);\r\n\r\n// const turboBoost = new powerUp(1.5, 4000, 100);\r\n\r\n\r\n// let lane1Counter;\r\n// let lane2Counter;\r\n// let lane3Counter;\r\n// let interval1Speed;\r\n// let interval2Speed;\r\n// let interval3Speed;\r\n// let powerUpInterval;\r\n\r\n// // start race & set interval speeds\r\n// const startRace = () => {\r\n//     interval1Speed = 10000 / car1.speed;\r\n//     interval2Speed = 10000/ car2.speed;\r\n//     interval3Speed = 10000/ car3.speed;\r\n//     lane1Counter = setInterval(car1Counter, interval1Speed);\r\n//     lane2Counter = setInterval(car2Counter, interval2Speed);\r\n//     lane3Counter = setInterval(car3Counter, interval3Speed);\r\n//     powerUpInterval = setInterval(powerUpPosition, 100);\r\n// }\r\n\r\n\r\n// let lapCount = 0;\r\n// let i = 0;\r\n\r\n// let lapCount2 = 0;\r\n// let c = 0;\r\n\r\n// let lapCount3 = 0;\r\n// let x = 0;\r\n\r\n// // car timers\r\n// const car1Counter = () => {\r\n//     if (i < 10) {\r\n//         i++;\r\n//         console.log(\"Car1 Position:\", i);\r\n//     } else if (i === 10) {\r\n//         if (lapCount < 3) {\r\n//             lapCount += 1;\r\n//             console.log(\"Car1 Lap:\", lapCount);\r\n//         } else if (lapCount === 3) {\r\n//             console.log(\"Car1 has finished the race!\");\r\n//             clearInterval(lane1Counter);\r\n//         }\r\n//         i = 0;\r\n//     }\r\n// }\r\n\r\n// const car2Counter = () => {\r\n//     if (c < 10) {\r\n//         c++;\r\n//         console.log(\"Car2 Position:\", c);\r\n//     } else if (c === 10) {\r\n//         if (lapCount2 < 3) {\r\n//             lapCount2 += 1;\r\n//             console.log(\"Car2 Lap:\", lapCount2);\r\n//         } else if (lapCount2 === 3) {\r\n//             console.log(\"Car2 has finished the race!\");\r\n//             clearInterval(lane2Counter);\r\n//         }\r\n//         c = 0;\r\n//     }\r\n// }\r\n\r\n// const car3Counter = () => {\r\n//     if (x < 10) {\r\n//         x++;\r\n//         console.log(\"Car3 Position:\", x);\r\n//     } else if (x === 10) {\r\n//         if (lapCount3 < 3) {\r\n//             lapCount3 += 1;\r\n//             console.log(\"Car3 Lap:\", lapCount3);\r\n//         } else if (lapCount3 === 3) {\r\n//             console.log(\"Car3 has finished the race!\");\r\n//             clearInterval(lane3Counter);\r\n//         }\r\n//         x = 0;\r\n//     }\r\n// }\r\n\r\n// // powerup rng\r\n// let positionSpawn = () => {\r\n//     return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\r\n// }\r\n\r\n// let laneSpawn = () => {\r\n//     return Math.floor(Math.random() * (3 - 1 + 1)) + 1;\r\n// }\r\n\r\n// // powerup position & usage\r\n// const powerUpPosition = () => {\r\n//     let randPosition = positionSpawn();\r\n//     let randLane = laneSpawn();\r\n\r\n//     if (randPosition === i && randLane === 1) {\r\n//         console.log(\"Car1 collected SUPREME FUEL!\");\r\n//         clearInterval(lane1Counter);\r\n//         lane1Counter = setInterval(car1Counter, 70);\r\n//         setTimeout(lane1Counter, 200);\r\n    \r\n//     } if (randPosition === c && randLane === 2) {\r\n//         console.log(\"Car2 collected SUPREME FUEL!\");\r\n//         clearInterval(lane2Counter);\r\n//         lane2Counter = setInterval(car2Counter, 70);\r\n//         setTimeout(lane2Counter, 200);\r\n  \r\n//     } if (randPosition === x && randLane === 3) {\r\n//         console.log(\"Car3 collected SUPREME FUEL!\");\r\n//         clearInterval(lane3Counter);\r\n//         lane3Counter = setInterval(car3Counter, 70);\r\n//         setTimeout(lane3Counter, 200);\r\n//     }\r\n// } \r\n\r\n// car constructor\r\nfunction car(name, speed, weight, acceleration, lane, isBet, bet, place) {\r\n    this.name = name;\r\n    this.speed = speed;\r\n    this.weight = weight;\r\n    this.acceleration = acceleration;\r\n    this.lane = lane;\r\n    this.isBet = isBet;\r\n    this.bet = bet;\r\n    this.place = place;\r\n\r\n}\r\n// cars\r\nconst car1 = new car(1, 100, 200, 5, 1, true, 50, 2);\r\n\r\nconst car2 = new car(2, 120, 300, 2, 2, false, 100, 1);\r\n\r\nconst car3 = new car(3, 90, 150, 7, 3, false, 200, 3);\r\n\r\nlet activeCars;\r\n\r\nconst carArray = () => {\r\n    activeCars.push(car1, car2, car3);\r\n}\r\n\r\ncarArray();\r\n\r\nconst isBet = () => {\r\n    activeCars.forEach(() => {\r\n        if (car.isBet === true) {\r\n            betMultiplier();\r\n            console.log('it worked');\r\n        }\r\n    })\r\n}\r\n\r\nlet winnings;\r\n\r\nconst betMultiplier = () => {\r\n    if (car.place === 1) {\r\n        winnings = car.bet * 2;\r\n    } else if (car.place === 2) {\r\n        winnings = car.bet * 1.25;\r\n    } else if (car.place === 3) {\r\n        winnings = car.bet * 0.5;\r\n    }\r\n}\r\n\r\nisBet();\r\n\r\nexport default Track;"]},"metadata":{},"sourceType":"module"}